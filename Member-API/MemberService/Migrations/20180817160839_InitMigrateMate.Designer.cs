// <auto-generated />
using MemberService.DataTypes.Enums;
using MemberService.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace MemberService.Migrations
{
    [DbContext(typeof(MemberContext))]
    [Migration("20180817160839_InitMigrateMate")]
    partial class InitMigrateMate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MemberService.Models.AttendanceInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DayOff");

                    b.Property<int>("Late");

                    b.Property<int>("SickUnverified");

                    b.Property<int>("SickVerified");

                    b.HasKey("Id");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("MemberService.Models.Class", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CalendarId");

                    b.Property<long?>("ClassAdminId");

                    b.Property<long?>("ClassLeadId");

                    b.Property<long?>("CohortId");

                    b.Property<string>("Color");

                    b.Property<long?>("CourseId");

                    b.Property<string>("Name");

                    b.Property<long>("SlackChannelId");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("ClassAdminId");

                    b.HasIndex("ClassLeadId");

                    b.HasIndex("CohortId");

                    b.HasIndex("CourseId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("MemberService.Models.Cohort", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("DepartmentId");

                    b.Property<DateTime>("FinishDate");

                    b.Property<string>("Name");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Cohorts");
                });

            modelBuilder.Entity("MemberService.Models.Course", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("DepartmentId");

                    b.Property<string>("Name");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("MemberService.Models.Department", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Country");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("ZipNumber");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("MemberService.Models.JobHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<long?>("ProfileId");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("JobHistories");
                });

            modelBuilder.Entity("MemberService.Models.JoinModels.ClassProfile", b =>
                {
                    b.Property<long>("ClassId");

                    b.Property<long>("ProfileId");

                    b.HasKey("ClassId", "ProfileId");

                    b.HasIndex("ProfileId");

                    b.ToTable("ClassProfile");
                });

            modelBuilder.Entity("MemberService.Models.Profile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("AttendanceInfoId");

                    b.Property<long?>("ClassApprenticeId");

                    b.Property<long?>("CohortApprenticeId");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<int>("Education");

                    b.Property<string>("Email");

                    b.Property<int>("Gender");

                    b.Property<string>("GitHubUser");

                    b.Property<bool>("IsSigned");

                    b.Property<int>("Level");

                    b.Property<string>("LinkedIn");

                    b.Property<string>("Name");

                    b.Property<int>("Payment");

                    b.Property<int>("Phase");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("Picture");

                    b.Property<long?>("ProjectId");

                    b.Property<string>("SlackUser");

                    b.Property<long?>("TeamApprenticeId");

                    b.HasKey("Id");

                    b.HasIndex("AttendanceInfoId");

                    b.HasIndex("ClassApprenticeId");

                    b.HasIndex("CohortApprenticeId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TeamApprenticeId");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("MemberService.Models.Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("DepartmentId");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("MemberService.Models.Team", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<long?>("ProductOwnerId");

                    b.Property<long?>("ProjectId");

                    b.Property<long?>("ScrumMasterId");

                    b.HasKey("Id");

                    b.HasIndex("ProductOwnerId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ScrumMasterId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("MemberService.Models.Class", b =>
                {
                    b.HasOne("MemberService.Models.Profile", "ClassAdmin")
                        .WithMany("ClassAdmins")
                        .HasForeignKey("ClassAdminId");

                    b.HasOne("MemberService.Models.Profile", "ClassLead")
                        .WithMany("ClassLeads")
                        .HasForeignKey("ClassLeadId");

                    b.HasOne("MemberService.Models.Cohort", "Cohort")
                        .WithMany("Classes")
                        .HasForeignKey("CohortId");

                    b.HasOne("MemberService.Models.Course", "Course")
                        .WithMany("Classes")
                        .HasForeignKey("CourseId");
                });

            modelBuilder.Entity("MemberService.Models.Cohort", b =>
                {
                    b.HasOne("MemberService.Models.Department", "Department")
                        .WithMany("Cohorts")
                        .HasForeignKey("DepartmentId");
                });

            modelBuilder.Entity("MemberService.Models.Course", b =>
                {
                    b.HasOne("MemberService.Models.Department", "Department")
                        .WithMany("Courses")
                        .HasForeignKey("DepartmentId");
                });

            modelBuilder.Entity("MemberService.Models.JobHistory", b =>
                {
                    b.HasOne("MemberService.Models.Profile", "Profile")
                        .WithMany("FormerJobs")
                        .HasForeignKey("ProfileId");
                });

            modelBuilder.Entity("MemberService.Models.JoinModels.ClassProfile", b =>
                {
                    b.HasOne("MemberService.Models.Class", "Class")
                        .WithMany("Mentors")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MemberService.Models.Profile", "Profile")
                        .WithMany("ClassMentors")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MemberService.Models.Profile", b =>
                {
                    b.HasOne("MemberService.Models.AttendanceInfo", "AttendanceInfo")
                        .WithMany()
                        .HasForeignKey("AttendanceInfoId");

                    b.HasOne("MemberService.Models.Class", "ClassApprentice")
                        .WithMany("Apprentices")
                        .HasForeignKey("ClassApprenticeId");

                    b.HasOne("MemberService.Models.Cohort", "CohortApprentice")
                        .WithMany()
                        .HasForeignKey("CohortApprenticeId");

                    b.HasOne("MemberService.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("MemberService.Models.Team", "TeamApprentice")
                        .WithMany("Apprentices")
                        .HasForeignKey("TeamApprenticeId");
                });

            modelBuilder.Entity("MemberService.Models.Project", b =>
                {
                    b.HasOne("MemberService.Models.Department", "Department")
                        .WithMany("Projects")
                        .HasForeignKey("DepartmentId");
                });

            modelBuilder.Entity("MemberService.Models.Team", b =>
                {
                    b.HasOne("MemberService.Models.Profile", "ProductOwner")
                        .WithMany("TeamProductOwners")
                        .HasForeignKey("ProductOwnerId");

                    b.HasOne("MemberService.Models.Project", "Project")
                        .WithMany("Teams")
                        .HasForeignKey("ProjectId");

                    b.HasOne("MemberService.Models.Profile", "ScrumMaster")
                        .WithMany("TeamScrumMasters")
                        .HasForeignKey("ScrumMasterId");
                });
#pragma warning restore 612, 618
        }
    }
}
