// <auto-generated />
using System;
using MemberService.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MemberService.Migrations
{
    [DbContext(typeof(MemberContext))]
    partial class MemberContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MemberService.Models.AttendanceInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DayOff");

                    b.Property<int>("Late");

                    b.Property<int>("SickUnverified");

                    b.Property<int>("SickVerified");

                    b.HasKey("Id");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("MemberService.Models.Class", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CalendarId");

                    b.Property<long?>("ClassAdminId");

                    b.Property<long?>("ClassLeadId");

                    b.Property<long?>("CohortId");

                    b.Property<string>("Color");

                    b.Property<long?>("CourseId");

                    b.Property<string>("Name");

                    b.Property<long>("SlackChannelId");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("ClassAdminId");

                    b.HasIndex("ClassLeadId");

                    b.HasIndex("CohortId");

                    b.HasIndex("CourseId");

                    b.ToTable("Classes");

                    b.HasData(
                        new { Id = 1L, CalendarId = 2L, Color = "red", Name = "Ocelot", SlackChannelId = 7L, Status = 0 },
                        new { Id = 2L, CalendarId = 1L, Color = "blue", Name = "Secret", SlackChannelId = 2L, Status = 2 },
                        new { Id = 3L, CalendarId = 3L, Color = "green", Name = "Raptor", SlackChannelId = 5L, Status = 1 },
                        new { Id = 4L, CalendarId = 4L, Color = "yellow", Name = "Lasers", SlackChannelId = 1L, Status = 0 },
                        new { Id = 5L, CalendarId = 5L, Color = "purple", Name = "BadBoi", SlackChannelId = 6L, Status = 0 },
                        new { Id = 6L, CalendarId = 7L, Color = "orange", Name = "Seagal", SlackChannelId = 4L, Status = 1 },
                        new { Id = 7L, CalendarId = 6L, Color = "black", Name = "Teapot", SlackChannelId = 3L, Status = 2 }
                    );
                });

            modelBuilder.Entity("MemberService.Models.Cohort", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("DepartmentId");

                    b.Property<DateTime>("FinishDate");

                    b.Property<string>("Name");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Cohorts");

                    b.HasData(
                        new { Id = 1L, FinishDate = new DateTime(2017, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Ace", StartDate = new DateTime(2017, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 2 },
                        new { Id = 2L, FinishDate = new DateTime(2017, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Alopex", StartDate = new DateTime(2017, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 0 },
                        new { Id = 3L, FinishDate = new DateTime(2018, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Macrotis", StartDate = new DateTime(2017, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 0 },
                        new { Id = 4L, FinishDate = new DateTime(2018, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Fulvipes", StartDate = new DateTime(2018, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 2 }
                    );
                });

            modelBuilder.Entity("MemberService.Models.Course", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("DepartmentId");

                    b.Property<string>("Name");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Courses");

                    b.HasData(
                        new { Id = 1L, Name = "Standard", Status = 0 },
                        new { Id = 2L, Name = "Accenture Girls", Status = 1 },
                        new { Id = 3L, Name = "Super Mommies", Status = 2 }
                    );
                });

            modelBuilder.Entity("MemberService.Models.Department", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("Country");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("ZipNumber");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new { Id = 1L, Address = "Andrassy 66.", Country = "HU", Email = "hr@gf.com", Name = "HR", PhoneNumber = "36701234567", ZipNumber = "1000" },
                        new { Id = 2L, Address = "Andrassy 66.", Country = "HU", Email = "mentors@gf.com", Name = "Mentors", PhoneNumber = "36701234568", ZipNumber = "1000" },
                        new { Id = 3L, Address = "Andrassy 66.", Country = "HU", Email = "partnermgmt@gf.com", Name = "Partner Management", PhoneNumber = "36701234569", ZipNumber = "1000" }
                    );
                });

            modelBuilder.Entity("MemberService.Models.JobHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<long?>("ProfileId");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("JobHistories");
                });

            modelBuilder.Entity("MemberService.Models.JoinModels.ClassProfile", b =>
                {
                    b.Property<long>("ClassId");

                    b.Property<long>("ProfileId");

                    b.HasKey("ClassId", "ProfileId");

                    b.HasIndex("ProfileId");

                    b.ToTable("ClassProfile");
                });

            modelBuilder.Entity("MemberService.Models.Profile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AttendanceInfoId");

                    b.Property<long?>("ClassApprenticeId");

                    b.Property<long?>("CohortApprenticeId");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<int>("Education");

                    b.Property<string>("Email");

                    b.Property<int>("Gender");

                    b.Property<string>("GitHubUser");

                    b.Property<bool>("IsSigned");

                    b.Property<int>("Level");

                    b.Property<string>("LinkedIn");

                    b.Property<string>("Name");

                    b.Property<int>("Payment");

                    b.Property<int>("Phase");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("Picture");

                    b.Property<long?>("ProjectId");

                    b.Property<string>("SlackUser");

                    b.Property<long?>("TeamApprenticeId");

                    b.HasKey("Id");

                    b.HasIndex("AttendanceInfoId");

                    b.HasIndex("ClassApprenticeId");

                    b.HasIndex("CohortApprenticeId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TeamApprenticeId");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("MemberService.Models.Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("DepartmentId");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("MemberService.Models.Team", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<long?>("ProductOwnerId");

                    b.Property<long?>("ProjectId");

                    b.Property<long?>("ScrumMasterId");

                    b.HasKey("Id");

                    b.HasIndex("ProductOwnerId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ScrumMasterId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("MemberService.Models.Class", b =>
                {
                    b.HasOne("MemberService.Models.Profile", "ClassAdmin")
                        .WithMany("ClassAdmins")
                        .HasForeignKey("ClassAdminId");

                    b.HasOne("MemberService.Models.Profile", "ClassLead")
                        .WithMany("ClassLeads")
                        .HasForeignKey("ClassLeadId");

                    b.HasOne("MemberService.Models.Cohort", "Cohort")
                        .WithMany("Classes")
                        .HasForeignKey("CohortId");

                    b.HasOne("MemberService.Models.Course", "Course")
                        .WithMany("Classes")
                        .HasForeignKey("CourseId");
                });

            modelBuilder.Entity("MemberService.Models.Cohort", b =>
                {
                    b.HasOne("MemberService.Models.Department", "Department")
                        .WithMany("Cohorts")
                        .HasForeignKey("DepartmentId");
                });

            modelBuilder.Entity("MemberService.Models.Course", b =>
                {
                    b.HasOne("MemberService.Models.Department", "Department")
                        .WithMany("Courses")
                        .HasForeignKey("DepartmentId");
                });

            modelBuilder.Entity("MemberService.Models.JobHistory", b =>
                {
                    b.HasOne("MemberService.Models.Profile", "Profile")
                        .WithMany("FormerJobs")
                        .HasForeignKey("ProfileId");
                });

            modelBuilder.Entity("MemberService.Models.JoinModels.ClassProfile", b =>
                {
                    b.HasOne("MemberService.Models.Class", "Class")
                        .WithMany("Mentors")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MemberService.Models.Profile", "Profile")
                        .WithMany("ClassMentors")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MemberService.Models.Profile", b =>
                {
                    b.HasOne("MemberService.Models.AttendanceInfo", "AttendanceInfo")
                        .WithMany()
                        .HasForeignKey("AttendanceInfoId");

                    b.HasOne("MemberService.Models.Class", "ClassApprentice")
                        .WithMany("Apprentices")
                        .HasForeignKey("ClassApprenticeId");

                    b.HasOne("MemberService.Models.Cohort", "CohortApprentice")
                        .WithMany()
                        .HasForeignKey("CohortApprenticeId");

                    b.HasOne("MemberService.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("MemberService.Models.Team", "TeamApprentice")
                        .WithMany("Apprentices")
                        .HasForeignKey("TeamApprenticeId");
                });

            modelBuilder.Entity("MemberService.Models.Project", b =>
                {
                    b.HasOne("MemberService.Models.Department", "Department")
                        .WithMany("Projects")
                        .HasForeignKey("DepartmentId");
                });

            modelBuilder.Entity("MemberService.Models.Team", b =>
                {
                    b.HasOne("MemberService.Models.Profile", "ProductOwner")
                        .WithMany("TeamProductOwners")
                        .HasForeignKey("ProductOwnerId");

                    b.HasOne("MemberService.Models.Project", "Project")
                        .WithMany("Teams")
                        .HasForeignKey("ProjectId");

                    b.HasOne("MemberService.Models.Profile", "ScrumMaster")
                        .WithMany("TeamScrumMasters")
                        .HasForeignKey("ScrumMasterId");
                });
#pragma warning restore 612, 618
        }
    }
}
